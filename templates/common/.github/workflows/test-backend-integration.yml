name: Backend Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-integration-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        SECRET_KEY: test-secret-key
      run: |
        export ASYNC_DATABASE_URL="postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb"
        alembic upgrade head
    
    - name: Test critical endpoints
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
        SECRET_KEY: test-secret-key
      run: |
        # Start server
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Test health endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/api/v1/health || exit 1
        
        # Test protected endpoints require auth
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/v1/users/)
        if [ "$response" != "401" ]; then
          echo "Users endpoint should require authentication"
          exit 1
        fi
        
        # Create test user
        curl -X POST http://localhost:8000/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"testpass123","full_name":"Test User"}' \
          -f || echo "User might already exist"
        
        # Test login
        TOKEN=$(curl -X POST http://localhost:8000/api/v1/auth/login \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "username=test@example.com&password=testpass123" \
          -s | python3 -c "import sys, json; print(json.load(sys.stdin).get('access_token', ''))")
        
        if [ -z "$TOKEN" ]; then
          echo "Failed to get auth token"
          exit 1
        fi
        
        echo "✓ Authentication working"
        
        # Test authenticated endpoints
        curl -f -H "Authorization: Bearer $TOKEN" \
          http://localhost:8000/api/v1/users/me || exit 1
        
        echo "✓ Protected endpoints accessible with token"
        
        kill $SERVER_PID
        echo "✅ All backend integration tests passed!"