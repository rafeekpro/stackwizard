version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: {{PROJECT_NAME}}-db
    environment:
      POSTGRES_USER: {{DB_USER}}
      POSTGRES_PASSWORD: {{DB_PASSWORD}}
      POSTGRES_DB: {{DB_NAME}}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{DB_USER}}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: {{PROJECT_NAME}}-backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://{{DB_USER}}:{{DB_PASSWORD}}@db:5432/{{DB_NAME}}
      SECRET_KEY: your-secret-key-here-change-in-production
    volumes:
      - ./backend:/app
    ports:
      - "{{API_PORT}}:8000"
    networks:
      - app-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: {{PROJECT_NAME}}-frontend
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:{{API_PORT}}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "{{FRONTEND_PORT}}:3000"
    networks:
      - app-network
    command: npm start

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge