version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stackwizard-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-stackwizard}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stackwizard123}
      POSTGRES_DB: ${POSTGRES_DB:-stackwizard_dev}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stackwizard}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stackwizard-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: stackwizard-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stackwizard-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: stackwizard-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-stackwizard}:${POSTGRES_PASSWORD:-stackwizard123}@postgres:5432/${POSTGRES_DB:-stackwizard_dev}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      ENVIRONMENT: development
      DEBUG: "true"
      RELOAD: "true"
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stackwizard-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: stackwizard-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:${API_PORT:-8000}
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - stackwizard-network
    command: npm start

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: stackwizard-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - stackwizard-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: stackwizard-mailhog
    restart: unless-stopped
    ports:
      - "${SMTP_PORT:-1025}:1025"
      - "${MAILHOG_UI_PORT:-8025}:8025"
    networks:
      - stackwizard-network

volumes:
  postgres_data:
    name: stackwizard_postgres_data
  redis_data:
    name: stackwizard_redis_data
  backend_venv:
    name: stackwizard_backend_venv

networks:
  stackwizard-network:
    name: stackwizard_network
    driver: bridge